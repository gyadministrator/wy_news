//file:noinspection DependencyNotationArgument
//file:noinspection GroovyImplicitNullArgumentCall
plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
}

android {
    namespace 'com.android.wy.news'
    compileSdk rootProject.ext.android.compileSdkVersion

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    signingConfigs {
        config {
            storeFile file('../wy_news.jks')
            storePassword 'gy123456'
            keyAlias = 'wy_android'
            keyPassword 'gy123456'
        }
    }

    defaultConfig {
        applicationId "com.android.wy.news"
        minSdk rootProject.ext.android.minSdkVersion
        targetSdk rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //必须要保证所有的flavor 都属于同一个维度
        //flavorDimensions "default"
        buildConfigField "boolean", "isShowLog", "true"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${variant.name}-v${variant.versionName}-${releaseTime()}.apk"
                }
            }
        }
        debug {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${variant.name}-v${variant.versionName}-${releaseTime()}.apk"
                }
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    /*productFlavors {
        //根据渠道配置
        wy_news_debug {
            buildConfigField "String", "CHANNEL", "\"_debug\""
        }
        wy_news_release {
            buildConfigField "String", "CHANNEL", "\"_release\""
        }
    }*/
}

static def releaseTime() {
    return new Date().format("yyyy.MM.dd", TimeZone.getTimeZone("GMT+8"))
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //rootProject.ext.dependencies
    implementation rootProject.ext.dependencies.coreKtx
    implementation rootProject.ext.dependencies.appcompat
    implementation rootProject.ext.dependencies.material
    implementation rootProject.ext.dependencies.constraintlayout
    implementation rootProject.ext.dependencies.supportV4
    implementation rootProject.ext.dependencies.livedataKtx
    implementation rootProject.ext.dependencies.viewmodelKtx
    implementation rootProject.ext.dependencies.lifecycleRuntimeKtx
    testImplementation rootProject.ext.dependencies.junit
    androidTestImplementation rootProject.ext.dependencies.junitExt
    androidTestImplementation rootProject.ext.dependencies.espressoCore
    implementation rootProject.ext.dependencies.customTabLayout
    implementation rootProject.ext.dependencies.gYBottomBar
    // Retrofit库
    implementation rootProject.ext.dependencies.retrofit
    implementation rootProject.ext.dependencies.rxjava2
    // json解析，可以自行替换
    implementation rootProject.ext.dependencies.gson
    implementation rootProject.ext.dependencies.glide
    // (必选)使用这个基础的webView实现
    implementation rootProject.ext.dependencies.agentweb
    // 基础依赖包，必须要依赖
    implementation rootProject.ext.dependencies.immersionbar
    implementation rootProject.ext.dependencies.shimmerRecyclerView
    //轮播图
    implementation rootProject.ext.dependencies.banner
    implementation rootProject.ext.dependencies.jiecaovideoplayer
    implementation rootProject.ext.dependencies.roundedimageview
    implementation rootProject.ext.dependencies.avi
    implementation rootProject.ext.dependencies.videocache
    implementation rootProject.ext.dependencies.jsoup
    implementation rootProject.ext.dependencies.permission
    //Room数据库
    implementation rootProject.ext.dependencies.roomRuntime
    annotationProcessor rootProject.ext.dependencies.roomCompiler
    kapt rootProject.ext.dependencies.roomCompiler
    implementation rootProject.ext.dependencies.roomKtx
    //刷新
    implementation rootProject.ext.dependencies.refresh
    //compose 核心
    implementation rootProject.ext.dependencies.composeUi
    implementation rootProject.ext.dependencies.composeMaterial
    implementation rootProject.ext.dependencies.composePreview
    androidTestImplementation platform(rootProject.ext.dependencies.composeBom)
    androidTestImplementation rootProject.ext.dependencies.composeUiTestJunit4
    debugImplementation rootProject.ext.dependencies.composeUiTooling
    debugImplementation rootProject.ext.dependencies.composeUiTestManifest
    implementation rootProject.ext.dependencies.activityCompose
    implementation platform(rootProject.ext.dependencies.composeBom)
    implementation rootProject.ext.dependencies.composeUiGraphics
    implementation rootProject.ext.dependencies.composematerial3
}