//file:noinspection DependencyNotationArgument
//file:noinspection ConfigurationAvoidance
//file:noinspection GrDeprecatedAPIUsage
import java.text.SimpleDateFormat

//file:noinspection DependencyNotationArgument
//file:noinspection GroovyImplicitNullArgumentCall
plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
}

android.buildFeatures.buildConfig = true

// 构建时间
def buildTime = System.currentTimeMillis()
// 是否显示Log
def isShowLog = true

android {
    namespace 'com.android.wy.news'
    compileSdk rootProject.ext.android.compileSdkVersion

    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    signingConfigs {
        config {
            storeFile file('../wy_news.jks')
            storePassword 'gy123456'
            keyAlias = 'wy_android'
            keyPassword 'gy123456'
        }
    }

    defaultConfig {
        applicationId "com.android.wy.news"
        minSdk rootProject.ext.android.minSdkVersion
        targetSdk rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //必须要保证所有的flavor 都属于同一个维度
        flavorDimensions "versionCode"
        buildConfigField "boolean", "isShowLog", "${isShowLog}"
        vectorDrawables {
            useSupportLibrary true
        }
        //kotlin 路由配置
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    android.applicationVariants.configureEach { variant ->
        variant.outputs.all {
            // 自定义生成的apk名称
            def dateFormat = new SimpleDateFormat("yyyyMMdd_HHmm")
            def date = new Date(buildTime)
            def dateStr = dateFormat.format(date)
            if (variant.buildType.name == "release") {
                outputFileName = "News_${variant.versionName}.apk"
            } else {
                outputFileName = "News_${variant.versionName}_${dateStr}.apk"
            }
        }
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.3.2'
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //rootProject.ext.dependencies
    implementation rootProject.ext.dependencies.coreKtx
    implementation rootProject.ext.dependencies.appcompat
    implementation rootProject.ext.dependencies.material
    implementation rootProject.ext.dependencies.constraintlayout
    implementation rootProject.ext.dependencies.supportV4
    implementation rootProject.ext.dependencies.livedataKtx
    implementation rootProject.ext.dependencies.viewmodelKtx
    implementation rootProject.ext.dependencies.lifecycleRuntimeKtx
    testImplementation rootProject.ext.dependencies.junit
    androidTestImplementation rootProject.ext.dependencies.junitExt
    androidTestImplementation rootProject.ext.dependencies.espressoCore
    implementation rootProject.ext.dependencies.splashScreen
    //Retrofit库
    implementation rootProject.ext.dependencies.retrofit
    implementation rootProject.ext.dependencies.rxjava2
    //json解析，可以自行替换
    implementation rootProject.ext.dependencies.gson
    implementation rootProject.ext.dependencies.glide
    implementation rootProject.ext.dependencies.glideTransformations
    //使用这个基础的webView实现
    implementation rootProject.ext.dependencies.agentweb
    //基础依赖包，必须要依赖
    implementation rootProject.ext.dependencies.immersionbar
    implementation rootProject.ext.dependencies.shimmerRecyclerView
    //轮播图
    implementation rootProject.ext.dependencies.banner
    implementation rootProject.ext.dependencies.roundedimageview
    implementation rootProject.ext.dependencies.jsoup
    implementation rootProject.ext.dependencies.permission
    //Room数据库
    implementation rootProject.ext.dependencies.roomRuntime
    annotationProcessor rootProject.ext.dependencies.roomCompiler
    kapt rootProject.ext.dependencies.roomCompiler
    implementation rootProject.ext.dependencies.roomKtx
    //刷新
    implementation rootProject.ext.dependencies.refresh
    //compose核心
    implementation rootProject.ext.dependencies.composeUi
    implementation rootProject.ext.dependencies.composeMaterial
    implementation rootProject.ext.dependencies.composePreview
    androidTestImplementation platform(rootProject.ext.dependencies.composeBom)
    androidTestImplementation rootProject.ext.dependencies.composeUiTestJunit4
    debugImplementation rootProject.ext.dependencies.composeUiTooling
    debugImplementation rootProject.ext.dependencies.composeUiTestManifest
    implementation rootProject.ext.dependencies.activityCompose
    implementation platform(rootProject.ext.dependencies.composeBom)
    implementation rootProject.ext.dependencies.composeUiGraphics
    implementation rootProject.ext.dependencies.composematerial3
    implementation rootProject.ext.dependencies.accompanistSystemUiController
    implementation rootProject.ext.dependencies.eventbus
    implementation rootProject.ext.dependencies.jiaozivideoplayer
    implementation project(':locationselect')
    implementation project(':bottombar')
    implementation project(':lrc')
    //kotlin路由导入
    implementation rootProject.ext.dependencies.arouterApi
    kapt rootProject.ext.dependencies.arouterCompiler
    implementation rootProject.ext.dependencies.rxAndroid
    implementation rootProject.ext.dependencies.fileDownloader
    //崩溃处理依赖
    implementation rootProject.ext.dependencies.customCrash
}

gradle.addBuildListener(new BuildListener() {

    @Override
    void settingsEvaluated(Settings settings) {

    }

    @Override
    void projectsLoaded(Gradle gradle) {

    }

    @Override
    void projectsEvaluated(Gradle gradle) {
        // 所有项目已配置完成，可以获取相关信息
        Project skinProject = null
        project.getParent().getChildProjects().each {
            if (it.key == "skin") {
                skinProject = it.value;
            }
        }

        if (skinProject == null) {
            logger.error("Can not Find Skin project")
            return
        }

        // 固定使用skin的release包
        def skinAssembleTask = skinProject.getTasks().getByName("assembleRelease")
        def skinPackageTask = skinProject.getTasks().getByName("packageRelease")

        project.getTasks().each {
            if (it.name.startsWith("merge") && it.name.endsWith("Assets") && !it.name.endsWith("TestAssets")) {

                // 在当前项目assets打包任务前先执行skin打包任务
                it.dependsOn(skinAssembleTask)

                // 将skin打包生成的apk复制到项目的assets目录中
                it.doLast {

                    // 获取skin生成的apk
                    def skinOutputs = skinPackageTask.getOutputs().getFiles().getFiles()
                    def skinApkDir = skinOutputs[skinOutputs.size() - 1]
                    def skinFiles = skinApkDir.listFiles()
                    File skinApkFile = null
                    skinFiles.each {
                        if (it.name.endsWith(".skin")) {
                            skinApkFile = it
                        }
                    }

                    if (skinApkFile == null) {
                        logger.error("Can not Find Skin file")
                        return
                    }

                    // 获取assets路径
                    def assetsOutputs = it.getOutputs().getFiles().getFiles()
                    def assetsDir = assetsOutputs[assetsOutputs.size() - 1]

                    // 拷贝文件
                    copy {
                        from skinApkFile
                        into assetsDir.getPath() + "/skins/"
                    }
                    logger.quiet("Finish Copying Skin file From ${skinApkFile.getPath()} To ${assetsDir.getPath()}/skins/")
                }
            }
        }

    }

    @Override
    void buildFinished(BuildResult result) {

    }
})